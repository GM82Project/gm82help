
    Game Maker 8.2 Event Order
    ==========================
    version 5 - Nov 29 2024

    Written by renex and Floogle, using new information and old research by:

    viri - Adam - BlackDoomer
    Tahnok100 - Nailog - tpvgames
    Weird Dragon
    
    You can find updated versions here:
    
    https://github.com/GM82Project/gm82help


--------------------------------------------------------------------------------

  Game started
  ------------

- Extensions are unpacked and compiled
- Constants are evaluated
    - At this point, graphics and code have not been fully prepared, so don't
      try to use scripts. Most builtins and extensions are fine, though.
- Library initialization code is executed
- Included files are extracted
- Extension initialization functions
    - Extensions are initialized in the order they display in the editor.
- Loading bar is hidden
- The debugger window is opened
- Textures are loaded to video memory
- Window is created
- Create
- Instance Creation Code*
- Game Start
- Room Creation Code
- Room Start
- Draw

* When the relevant Game Settings checkbox is enabled in 8.2, otherwise they
  execute before Create events. This applies to all cases of this event.


--------------------------------------------------------------------------------

  Room Change
  -----------

->  Whenever room_goto*() functions are called, or the 'room' variable is set.

->  The current code action will finish, but any subsequent code actions will
    not be allowed to execute until the new room is loaded. Attempting to change
    the room again or end the game during a room change will cause unintended
    behavior that is not entirely understood.

- If a room transition is set, Draw*
- Room End
- New room is loaded
    - Any persistent instances are added to the end of the instance list
- Create**
- Object Fields**
- Instance Creation Code**
- Room Creation Code
- Room Start
- Draw*
- Room transition script (if any) is executed 'transition_steps' times
    - time between script calls varies between 1x and 2x the screen refresh
      rate, due to a bug in the implementation of vsync for this

* If automatic draw is off, Draw is skipped.

** You can swap the order in which Create and Fields+Creation Code execute in
   the Game Settings. Using Fields with default GM8 order does not work.

->  While the game is scheduled for a room change, most code is skipped,
    however a few things can still execute:

- solid collision pushback
- alarms ticking (they won't execute their actions if they hit 0)

->  Note that any instances whose sprites have been replaced at runtime will
    have broken collision until they move, since the collision data is cached
    at game load.


--------------------------------------------------------------------------------

  Create order
  ------------
  
-> When entering a room, Create events execute in the order that the instances
   are placed in the room.

-> When using the builtin room editor, this order can change seemingly
   randomly for unknown reasons.
  
-> When using the new 8.2 room editor, order within the same depth is preserved,
   but instances are sorted by depth positive to negative in such a way that
   they get created in roughly draw order. Additionally, order within the same
   depth is preserved throughout editing.
  
-> When created in code, Create events run before instance_create returns.
  
-> When using instance_create_moving() from Core, which is a shim for
   action_create_object_motion, speed/direction/hspeed/vspeed are set before the
   Create event runs.
   
-> Additionally, if a room change has been scheduled using the various room_goto
   functions or setting the room variable directly, Create events do not execute
   on any newly created instances until the new room is entered.


--------------------------------------------------------------------------------

  Frame Event Order
  -----------------

- xprevious and yprevious are updated to x and y
- Early Triggers
- Begin Step
- Timelines count up & run moments
- Alarms count down & run on 0
- Keyboard
- Keyboard Press
- Keyboard Release
- Mouse
- Global Mouse
- Mouse Pressed
- Global Mouse Pressed
- Mouse Released
- Global Mouse Released
- Triggers
- Step
- Instance Update*
    - Friction is applied
    - Gravity is applied
    - Instance is moved to new position
- End Of Path*
- Outside room
- Intersect Boundary
- Collision events***
- Late Triggers
- End Step
- Particle systems update
- Destroyed instances are deleted
- Draw* **
- Backgrounds are updated
- image_speed is added to image_index*
- Animation End*
    - Executes when image_index wraps around to 0.
    - Does not execute when image_speed is negative.
    - Will execute every step with a single-image sprite or no sprite.
- cursor animation is advanced
- The debug form is updated
- The window is updated with the new frame and sleeps until the next frame****

->  Automatic triggers are always executed in the order they display in the
    editor, but manually called triggers execute immediately.


* These events execute by master instance list sorting order. All other events
  are executed by object list order instead. Check the section at the end for
  more details.

** If automatic draw is off, this event is skipped.

*** Collision events are more complicated if either instance is solid.
    More details in the next section.

**** In 8.1, the game sleeps before presenting the new frame. This was switched
     around for 8.2.


--------------------------------------------------------------------------------

  Solid Collision
  ---------------

->  Whenever two instances collide, Game Maker does some extra steps if
    either of them are currently solid.

- Mask intersection is detected
- If either instance is solid, move both of them to their x/yprevious
- Run the collision event for both of them
- If either instance is still solid, advance both of them by their speed values
- If they're still colliding after this, move both to x/yprevious again

->  Note that you can change the x/yprevious and solid variables at any moment,
    which alters how this sequence is processed and causes nonsensical behavior.

->  Generally, the order in which the events execute is determined by:
     - The object index for looking for collisions in the first place
     - The unsorted per-object instance list for which instance checks first
    This also means that persistent instances from a previous room and
    reactivated instances will process their collisions last.

->  Due to the above remarks and other issues, it is generally recommended to
    avoid making any solid instances move with speed values.


--------------------------------------------------------------------------------

  Draw Event
  ----------

->  If automatic draw is off, this event is skipped. That includes the sorting.

->  At the start of every draw event (including the ones triggered by room
    transitions), the master instance list is sorted. More details about that
    in the section about instance sorting.

- instances are sorted according to depth
- the window is cleared to the window color, if it's enabled
- views are moved to follow their objects
- for each visible view:*
    - the view is cleared to the background_color, if it's enabled
        - this also results in clearing the z-buffer
    - backgrounds are drawn at 3d depth 12000**
    - instances, tiles and particle systems are drawn in depth order
        - within the same depth, particles are on top of tiles,
          and tiles are on top of instances
    - foregrounds are drawn at 3d depth -12000**
    - the sprite cursor is drawn at 3d depth -13000**
- the window caption is updated to the room_caption

* If views are not enabled, the entire room is drawn instead.
** 3d depth only applies when 3d mode is on. When 3d mode is off, the resulting
   vertex z coordinate of builtin 2d drawing is always 0.


--------------------------------------------------------------------------------

  Game Ending
  -----------

- Room End
- Game End
- Extension finalization functions
    - Extensions are finalized in the order they display in the editor.
- Active DLLs are freed


--------------------------------------------------------------------------------

  Other Events
  ------------

->  Create, User Events, and Destroy events execute immediately when called.
->  Out of Health & Out of Lives events execute once, the moment the variables
    are set to zero or negative values.
->  If an event is cleared from code within that same event using
    object_event_clear(), execution is stopped and no errors are generated.
    If this is done from within a script, the rest of the script will execute.


--------------------------------------------------------------------------------

  Instance Sorting
  ----------------

->  Game Maker has a master list of active instances. New instances are always
    added at the end, and a sort is performed at the start of Draw events.

->  Most of these details are not relevant if a game's code is well behaved,
    but for edge cases and exploits, knowing the proper procedures might result
    in easier debugging and more reliable code.

->  Any events that aren't sorted by draw order will instead make use of
    object-specific instance lists, which are completely unsorted, simply being
    ordered by creation. When re-activated, instances are placed at the ends of
    these lists.

- Instances are sorted by depth, in descending order. Larger goes first.
- Within the same depth, it sorts and executes by creation order.
- Instance activation and deactivation take place immediately, removing or
  placing instances at the end of the lists.
- Deactivated instances are moved to a different list, and can't be accessed
  even if you know their id.
- Instances are sorted even if they're not visible.

->  During the brief moment before a draw event, new instances won't be sorted:

- Re-activated instances will sort last, in the order they were activated in.
- Upon entering a room, persistent instances from a previous room will sort
  last, in the order they were in the previous room.
- If any instances are created during the start of a room, those new instances
  will be placed after any persistent instances from a previous room due to
  those events running after the persistent instances are appended to the list.


--------------------------------------------------------------------------------
